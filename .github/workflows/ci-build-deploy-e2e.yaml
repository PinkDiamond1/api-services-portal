name: Build and Deploy Cypress and Execute Tests

on:
  push:
    branches:
      - 'util/automation-*'

env:
  REGISTRY: docker.pkg.github.com
  REGISTRY_USERNAME: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/bcgov/api-services-portal/aps-cypress-e2e

      - name: Set DEPLOY_ID which will deploy a custom deploy to 'dev' environment
        run: |
          echo '::set-output name=DEPLOY_ID::${{ steps.docker_meta.outputs.version }}'
          echo '::set-output name=APP_VERSION::${{ fromJSON(steps.docker_meta.outputs.json).labels['org.opencontainers.image.version'] }}'
          echo '::set-output name=APP_REVISION::${{ fromJSON(steps.docker_meta.outputs.json).labels['org.opencontainers.image.revision'] }}'
        id: set-deploy-id

      - name: Get deploy ID
        run: echo "The DEPLOY_ID is ${{ steps.set-deploy-id.outputs.DEPLOY_ID }}"

      - uses: actions/checkout@v2

      - name: Install oc
        uses: redhat-actions/oc-installer@v1
        with:
          version: '4.6'

      - name: Authenticate and set context
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}

          # Disables SSL cert checking. Use this if you don't have the certificate authority data.
          insecure_skip_tls_verify: true

          namespace: ${{ env.OPENSHIFT_NAMESPACE }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Build
        uses: docker/build-push-action@v2
        with:
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          context: ./e2e
          file: ./e2e/Dockerfile
          tags: ${{ steps.docker_meta.outputs.tags }}
          load: true
          build-args: |
            GITHUB_API_TOKEN=${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
            APP_VERSION=${{ steps.set-deploy-id.outputs.APP_VERSION }}
            APP_REVISION=${{ steps.set-deploy-id.outputs.APP_REVISION }}

      - name: Push
        run: docker push ${{ steps.docker_meta.outputs.tags }}

      - name: 'Get Helm'
        run: |
          curl -L -O https://get.helm.sh/helm-v3.4.2-linux-amd64.tar.gz
          tar -xf helm-v3.4.2-linux-amd64.tar.gz

      - name: 'Deploy e2e Testing Suite'
        run: |
          export PATH=$PATH:`pwd`/linux-amd64

          echo "
          podAnnotations:
            sha: $GITHUB_SHA

          replicaCount: 1

          rollingUpdate:
            maxUnavailable: 50%
            maxSurge: 50%

          image:
            repository: ${{ env.REGISTRY }}/bcgov/api-services-portal/aps-cypress-e2e
            tag: ${{ steps.set-deploy-id.outputs.DEPLOY_ID }}
            pullPolicy: Always

          imagePullSecrets:
            - name: dev-github-read-packages-creds

          podSecurityContext:
            fsGroup: ${{ secrets.RUNNING_UID_GID }}

          securityContext:
            runAsUser: ${{ secrets.RUNNING_UID_GID }}

          extraVolumeMounts:
            - name: aps-portal-e2e-user-creds
              mountPath: "/app"
              readOnly: true

          extraVolumes:
          - name: aps-portal-e2e-user-creds
            secret:
              secretName: bcgov-aps-portal-e2e-generic-api-secrets 

          " > values.yaml

          helm repo add bcgov http://bcgov.github.io/helm-charts
          helm upgrade --install proto-asp-${{ steps.set-deploy-id.outputs.DEPLOY_ID }} -f values.yaml bcgov/generic-api
